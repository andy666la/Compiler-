const vmt_TV
	:TV.Start

const vmt_Tree
	:Tree.Init
	:Tree.SetRight
	:Tree.SetLeft
	:Tree.GetRight
	:Tree.GetLeft
	:Tree.GetKey
	:Tree.SetKey
	:Tree.GetHas_Right
	:Tree.GetHas_Left
	:Tree.SetHas_Left
	:Tree.SetHas_Right
	:Tree.Compare
	:Tree.Insert
	:Tree.Delete
	:Tree.Remove
	:Tree.RemoveRight
	:Tree.RemoveLeft
	:Tree.Search
	:Tree.Print
	:Tree.RecPrint
	:Tree.accept

const vmt_Visitor
	:Visitor.visit

const vmt_MyVisitor
	:MyVisitor.visit

func Main()
	t.0 = HeapAllocZ(4)
	[t.0] = :vmt_TV
	if t.0 goto :null1
	Error("null pointer")
	null1:
	t.1 = [t.0]
	t.1 = [t.1+0]
	t.2 = call t.1(t.0)
	PrintIntS(t.2)
	ret

func TV.Start(this)
	t.1 = HeapAllocZ(28)
	[t.1] = :vmt_Tree
	if t.1 goto :null2
	Error("null pointer")
	null2:
	t.0 = t.1
	t.3 = [t.0]
	t.3 = [t.3+0]
	t.4 = call t.3(t.0 16)
	t.2 = t.4
	t.5 = [t.0]
	t.5 = [t.5+72]
	t.6 = call t.5(t.0)
	t.2 = t.6
	PrintIntS(100000000)
	t.7 = [t.0]
	t.7 = [t.7+48]
	t.8 = call t.7(t.0 8)
	t.2 = t.8
	t.9 = [t.0]
	t.9 = [t.9+48]
	t.10 = call t.9(t.0 24)
	t.2 = t.10
	t.11 = [t.0]
	t.11 = [t.11+48]
	t.12 = call t.11(t.0 4)
	t.2 = t.12
	t.13 = [t.0]
	t.13 = [t.13+48]
	t.14 = call t.13(t.0 12)
	t.2 = t.14
	t.15 = [t.0]
	t.15 = [t.15+48]
	t.16 = call t.15(t.0 20)
	t.2 = t.16
	t.17 = [t.0]
	t.17 = [t.17+48]
	t.18 = call t.17(t.0 28)
	t.2 = t.18
	t.19 = [t.0]
	t.19 = [t.19+48]
	t.20 = call t.19(t.0 14)
	t.2 = t.20
	t.21 = [t.0]
	t.21 = [t.21+72]
	t.22 = call t.21(t.0)
	t.2 = t.22
	PrintIntS(100000000)
	t.24 = HeapAllocZ(12)
	[t.24] = :vmt_MyVisitor
	if t.24 goto :null3
	Error("null pointer")
	null3:
	t.23 = t.24
	PrintIntS(50000000)
	t.26 = [t.0]
	t.26 = [t.26+80]
	t.27 = call t.26(t.0 t.23)
	t.25 = t.27
	PrintIntS(100000000)
	t.28 = [t.0]
	t.28 = [t.28+68]
	t.29 = call t.28(t.0 24)
	PrintIntS(t.29)
	t.30 = [t.0]
	t.30 = [t.30+68]
	t.31 = call t.30(t.0 12)
	PrintIntS(t.31)
	t.32 = [t.0]
	t.32 = [t.32+68]
	t.33 = call t.32(t.0 16)
	PrintIntS(t.33)
	t.34 = [t.0]
	t.34 = [t.34+68]
	t.35 = call t.34(t.0 50)
	PrintIntS(t.35)
	t.36 = [t.0]
	t.36 = [t.36+68]
	t.37 = call t.36(t.0 12)
	PrintIntS(t.37)
	t.38 = [t.0]
	t.38 = [t.38+52]
	t.39 = call t.38(t.0 12)
	t.2 = t.39
	t.40 = [t.0]
	t.40 = [t.40+72]
	t.41 = call t.40(t.0)
	t.2 = t.41
	t.42 = [t.0]
	t.42 = [t.42+68]
	t.43 = call t.42(t.0 12)
	PrintIntS(t.43)
	ret 0

func Tree.Init(this v_key)
	[this+12] = v_key
	t.2 = 0
	[this+16] = t.2
	t.4 = 0
	[this+20] = t.4
	t.5 = 1
	ret t.5

func Tree.SetRight(this rn)
	[this+8] = rn
	t.1 = 1
	ret t.1

func Tree.SetLeft(this ln)
	[this+4] = ln
	t.1 = 1
	ret t.1

func Tree.GetRight(this)
	t.0 = [this+8]
	ret t.0

func Tree.GetLeft(this)
	t.0 = [this+4]
	ret t.0

func Tree.GetKey(this)
	t.0 = [this+12]
	ret t.0

func Tree.SetKey(this v_key)
	[this+12] = v_key
	t.1 = 1
	ret t.1

func Tree.GetHas_Right(this)
	t.0 = [this+20]
	ret t.0

func Tree.GetHas_Left(this)
	t.0 = [this+16]
	ret t.0

func Tree.SetHas_Left(this val)
	[this+16] = val
	t.1 = 1
	ret t.1

func Tree.SetHas_Right(this val)
	[this+20] = val
	t.1 = 1
	ret t.1

func Tree.Compare(this num1 num2)
	t.1 = 0
	t.0 = t.1
	t.3 = Add(num2 1)
	t.2 = t.3
	t.4 = LtS(num1 num2)
	if0 t.4 goto :if4_else
		t.5 = 0
		t.0 = t.5
		goto :if4_end
	if4_else:
		t.6 = LtS(num1 t.2)
		t.7 = Sub(1 t.6)
		if0 t.7 goto :if5_else
			t.8 = 0
			t.0 = t.8
			goto :if5_end
		if5_else:
			t.9 = 1
			t.0 = t.9
		if5_end:
	if4_end:
	ret t.0

func Tree.Insert(this v_key)
	t.1 = HeapAllocZ(28)
	[t.1] = :vmt_Tree
	if t.1 goto :null6
	Error("null pointer")
	null6:
	t.0 = t.1
	t.3 = [t.0]
	t.3 = [t.3+0]
	t.4 = call t.3(t.0 v_key)
	t.2 = t.4
	t.5 = this
	t.7 = 1
	t.6 = t.7
	loop7_begin:
	if0 t.6 goto :loop7_end
		t.9 = [t.5]
		t.9 = [t.9+20]
		t.10 = call t.9(t.5)
		t.8 = t.10
		t.11 = LtS(v_key t.8)
		if0 t.11 goto :if8_else
			t.12 = [t.5]
			t.12 = [t.12+32]
			t.13 = call t.12(t.5)
			if0 t.13 goto :if9_else
				t.14 = [t.5]
				t.14 = [t.14+16]
				t.15 = call t.14(t.5)
				t.5 = t.15
				goto :if9_end
			if9_else:
				t.16 = 0
				t.6 = t.16
				t.17 = [t.5]
				t.17 = [t.17+36]
				t.19 = 1
				t.18 = call t.17(t.5 t.19)
				t.2 = t.18
				t.20 = [t.5]
				t.20 = [t.20+8]
				t.21 = call t.20(t.5 t.0)
				t.2 = t.21
			if9_end:
			goto :if8_end
		if8_else:
			t.22 = [t.5]
			t.22 = [t.22+28]
			t.23 = call t.22(t.5)
			if0 t.23 goto :if10_else
				t.24 = [t.5]
				t.24 = [t.24+12]
				t.25 = call t.24(t.5)
				t.5 = t.25
				goto :if10_end
			if10_else:
				t.26 = 0
				t.6 = t.26
				t.27 = [t.5]
				t.27 = [t.27+40]
				t.29 = 1
				t.28 = call t.27(t.5 t.29)
				t.2 = t.28
				t.30 = [t.5]
				t.30 = [t.30+4]
				t.31 = call t.30(t.5 t.0)
				t.2 = t.31
			if10_end:
		if8_end:
		goto :loop7_begin
	loop7_end:
	t.32 = 1
	ret t.32

func Tree.Delete(this v_key)
	t.0 = this
	t.1 = this
	t.3 = 1
	t.2 = t.3
	t.5 = 0
	t.4 = t.5
	t.7 = 1
	t.6 = t.7
	loop11_begin:
	if0 t.2 goto :loop11_end
		t.9 = [t.0]
		t.9 = [t.9+20]
		t.10 = call t.9(t.0)
		t.8 = t.10
		t.11 = LtS(v_key t.8)
		if0 t.11 goto :if12_else
			t.12 = [t.0]
			t.12 = [t.12+32]
			t.13 = call t.12(t.0)
			if0 t.13 goto :if13_else
				t.1 = t.0
				t.14 = [t.0]
				t.14 = [t.14+16]
				t.15 = call t.14(t.0)
				t.0 = t.15
				goto :if13_end
			if13_else:
				t.16 = 0
				t.2 = t.16
			if13_end:
			goto :if12_end
		if12_else:
			t.17 = LtS(t.8 v_key)
			if0 t.17 goto :if14_else
				t.18 = [t.0]
				t.18 = [t.18+28]
				t.19 = call t.18(t.0)
				if0 t.19 goto :if15_else
					t.1 = t.0
					t.20 = [t.0]
					t.20 = [t.20+12]
					t.21 = call t.20(t.0)
					t.0 = t.21
					goto :if15_end
				if15_else:
					t.22 = 0
					t.2 = t.22
				if15_end:
				goto :if14_end
			if14_else:
				if0 t.6 goto :if16_else
					t.23 = [t.0]
					t.23 = [t.23+28]
					t.24 = call t.23(t.0)
					t.25 = Sub(1 t.24)
					t.26 = [t.0]
					t.26 = [t.26+32]
					t.27 = call t.26(t.0)
					t.28 = Sub(1 t.27)
					t.29 = MulS(t.25 t.28)
					if0 t.29 goto :if17_else
						t.31 = 1
						t.30 = t.31
						goto :if17_end
					if17_else:
						t.32 = [this]
						t.32 = [t.32+56]
						t.33 = call t.32(this t.1 t.0)
						t.30 = t.33
					if17_end:
					goto :if16_end
				if16_else:
					t.34 = [this]
					t.34 = [t.34+56]
					t.35 = call t.34(this t.1 t.0)
					t.30 = t.35
				if16_end:
				t.36 = 1
				t.4 = t.36
				t.37 = 0
				t.2 = t.37
			if14_end:
		if12_end:
		t.38 = 0
		t.6 = t.38
		goto :loop11_begin
	loop11_end:
	ret t.4

func Tree.Remove(this p_node c_node)
	t.0 = [c_node]
	t.0 = [t.0+32]
	t.1 = call t.0(c_node)
	if0 t.1 goto :if18_else
		t.3 = [this]
		t.3 = [t.3+64]
		t.4 = call t.3(this p_node c_node)
		t.2 = t.4
		goto :if18_end
	if18_else:
		t.5 = [c_node]
		t.5 = [t.5+28]
		t.6 = call t.5(c_node)
		if0 t.6 goto :if19_else
			t.7 = [this]
			t.7 = [t.7+60]
			t.8 = call t.7(this p_node c_node)
			t.2 = t.8
			goto :if19_end
		if19_else:
			t.10 = [c_node]
			t.10 = [t.10+20]
			t.11 = call t.10(c_node)
			t.9 = t.11
			t.13 = [p_node]
			t.13 = [t.13+16]
			t.14 = call t.13(p_node)
			t.15 = [t.14]
			t.15 = [t.15+20]
			t.16 = call t.15(t.14)
			t.12 = t.16
			t.17 = [this]
			t.17 = [t.17+44]
			t.18 = call t.17(this t.9 t.12)
			if0 t.18 goto :if20_else
				t.19 = [p_node]
				t.19 = [t.19+8]
				t.21 = [this+24]
				t.20 = call t.19(p_node t.21)
				t.2 = t.20
				t.22 = [p_node]
				t.22 = [t.22+36]
				t.24 = 0
				t.23 = call t.22(p_node t.24)
				t.2 = t.23
				goto :if20_end
			if20_else:
				t.25 = [p_node]
				t.25 = [t.25+4]
				t.27 = [this+24]
				t.26 = call t.25(p_node t.27)
				t.2 = t.26
				t.28 = [p_node]
				t.28 = [t.28+40]
				t.30 = 0
				t.29 = call t.28(p_node t.30)
				t.2 = t.29
			if20_end:
		if19_end:
	if18_end:
	t.31 = 1
	ret t.31

func Tree.RemoveRight(this p_node c_node)
	loop21_begin:
	t.0 = [c_node]
	t.0 = [t.0+28]
	t.1 = call t.0(c_node)
	if0 t.1 goto :loop21_end
		t.3 = [c_node]
		t.3 = [t.3+24]
		t.5 = [c_node]
		t.5 = [t.5+12]
		t.6 = call t.5(c_node)
		t.7 = [t.6]
		t.7 = [t.7+20]
		t.8 = call t.7(t.6)
		t.4 = call t.3(c_node t.8)
		t.2 = t.4
		p_node = c_node
		t.9 = [c_node]
		t.9 = [t.9+12]
		t.10 = call t.9(c_node)
		c_node = t.10
		goto :loop21_begin
	loop21_end:
	t.11 = [p_node]
	t.11 = [t.11+4]
	t.13 = [this+24]
	t.12 = call t.11(p_node t.13)
	t.2 = t.12
	t.14 = [p_node]
	t.14 = [t.14+40]
	t.16 = 0
	t.15 = call t.14(p_node t.16)
	t.2 = t.15
	t.17 = 1
	ret t.17

func Tree.RemoveLeft(this p_node c_node)
	loop22_begin:
	t.0 = [c_node]
	t.0 = [t.0+32]
	t.1 = call t.0(c_node)
	if0 t.1 goto :loop22_end
		t.3 = [c_node]
		t.3 = [t.3+24]
		t.5 = [c_node]
		t.5 = [t.5+16]
		t.6 = call t.5(c_node)
		t.7 = [t.6]
		t.7 = [t.7+20]
		t.8 = call t.7(t.6)
		t.4 = call t.3(c_node t.8)
		t.2 = t.4
		p_node = c_node
		t.9 = [c_node]
		t.9 = [t.9+16]
		t.10 = call t.9(c_node)
		c_node = t.10
		goto :loop22_begin
	loop22_end:
	t.11 = [p_node]
	t.11 = [t.11+8]
	t.13 = [this+24]
	t.12 = call t.11(p_node t.13)
	t.2 = t.12
	t.14 = [p_node]
	t.14 = [t.14+36]
	t.16 = 0
	t.15 = call t.14(p_node t.16)
	t.2 = t.15
	t.17 = 1
	ret t.17

func Tree.Search(this v_key)
	t.0 = this
	t.2 = 1
	t.1 = t.2
	t.3 = 0
	loop23_begin:
	if0 t.1 goto :loop23_end
		t.5 = [t.0]
		t.5 = [t.5+20]
		t.6 = call t.5(t.0)
		t.4 = t.6
		t.7 = LtS(v_key t.4)
		if0 t.7 goto :if24_else
			t.8 = [t.0]
			t.8 = [t.8+32]
			t.9 = call t.8(t.0)
			if0 t.9 goto :if25_else
				t.10 = [t.0]
				t.10 = [t.10+16]
				t.11 = call t.10(t.0)
				t.0 = t.11
				goto :if25_end
			if25_else:
				t.12 = 0
				t.1 = t.12
			if25_end:
			goto :if24_end
		if24_else:
			t.13 = LtS(t.4 v_key)
			if0 t.13 goto :if26_else
				t.14 = [t.0]
				t.14 = [t.14+28]
				t.15 = call t.14(t.0)
				if0 t.15 goto :if27_else
					t.16 = [t.0]
					t.16 = [t.16+12]
					t.17 = call t.16(t.0)
					t.0 = t.17
					goto :if27_end
				if27_else:
					t.18 = 0
					t.1 = t.18
				if27_end:
				goto :if26_end
			if26_else:
				t.3 = 1
				t.19 = 0
				t.1 = t.19
			if26_end:
		if24_end:
		goto :loop23_begin
	loop23_end:
	ret t.3

func Tree.Print(this)
	t.0 = this
	t.2 = [this]
	t.2 = [t.2+76]
	t.3 = call t.2(this t.0)
	t.1 = t.3
	t.4 = 1
	ret t.4

func Tree.RecPrint(this node)
	t.0 = [node]
	t.0 = [t.0+32]
	t.1 = call t.0(node)
	if0 t.1 goto :if28_else
		t.3 = [this]
		t.3 = [t.3+76]
		t.5 = [node]
		t.5 = [t.5+16]
		t.6 = call t.5(node)
		t.4 = call t.3(this t.6)
		t.2 = t.4
		goto :if28_end
	if28_else:
		t.7 = 1
		t.2 = t.7
	if28_end:
	t.8 = [node]
	t.8 = [t.8+20]
	t.9 = call t.8(node)
	PrintIntS(t.9)
	t.10 = [node]
	t.10 = [t.10+28]
	t.11 = call t.10(node)
	if0 t.11 goto :if29_else
		t.12 = [this]
		t.12 = [t.12+76]
		t.14 = [node]
		t.14 = [t.14+12]
		t.15 = call t.14(node)
		t.13 = call t.12(this t.15)
		t.2 = t.13
		goto :if29_end
	if29_else:
		t.16 = 1
		t.2 = t.16
	if29_end:
	t.17 = 1
	ret t.17

func Tree.accept(this v)
	PrintIntS(333)
	t.1 = [v]
	t.1 = [t.1+0]
	t.2 = call t.1(v this)
	t.0 = t.2
	ret 0

func Visitor.visit(this n)
	t.0 = [n]
	t.0 = [t.0+28]
	t.1 = call t.0(n)
	if0 t.1 goto :if30_else
		t.3 = [n]
		t.3 = [t.3+12]
		t.4 = call t.3(n)
		[this+8] = t.4
		t.6 = [this+8]
		t.7 = [t.6]
		t.7 = [t.7+80]
		t.8 = call t.7(t.6 this)
		t.5 = t.8
		goto :if30_end
	if30_else:
		t.5 = 0
	if30_end:
	t.9 = [n]
	t.9 = [t.9+32]
	t.10 = call t.9(n)
	if0 t.10 goto :if31_else
		t.12 = [n]
		t.12 = [t.12+16]
		t.13 = call t.12(n)
		[this+4] = t.13
		t.14 = [this+4]
		t.15 = [t.14]
		t.15 = [t.15+80]
		t.16 = call t.15(t.14 this)
		t.5 = t.16
		goto :if31_end
	if31_else:
		t.5 = 0
	if31_end:
	ret 0

func MyVisitor.visit(this n)
	t.0 = [n]
	t.0 = [t.0+28]
	t.1 = call t.0(n)
	if0 t.1 goto :if32_else
		t.3 = [n]
		t.3 = [t.3+12]
		t.4 = call t.3(n)
		[this+8] = t.4
		t.6 = [this+8]
		t.7 = [t.6]
		t.7 = [t.7+80]
		t.8 = call t.7(t.6 this)
		t.5 = t.8
		goto :if32_end
	if32_else:
		t.5 = 0
	if32_end:
	t.9 = [n]
	t.9 = [t.9+20]
	t.10 = call t.9(n)
	PrintIntS(t.10)
	t.11 = [n]
	t.11 = [t.11+32]
	t.12 = call t.11(n)
	if0 t.12 goto :if33_else
		t.14 = [n]
		t.14 = [t.14+16]
		t.15 = call t.14(n)
		[this+4] = t.15
		t.16 = [this+4]
		t.17 = [t.16]
		t.17 = [t.17+80]
		t.18 = call t.17(t.16 this)
		t.5 = t.18
		goto :if33_end
	if33_else:
		t.5 = 0
	if33_end:
	ret 0

